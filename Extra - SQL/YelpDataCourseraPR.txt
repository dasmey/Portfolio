Data Scientist Role Play: Profiling and Analyzing the Yelp Dataset Coursera Worksheet

This is a 2-part assignment. In the first part, you are asked a series of questions that will help you profile and understand the data just like a data scientist would. For this first part of the assignment, you will be assessed both on the correctness of your findings, as well as the code you used to arrive at your answer. You will be graded on how easy your code is to read, so remember to use proper formatting and comments where necessary.

In the second part of the assignment, you are asked to come up with your own inferences and analysis of the data for a particular research question you want to answer. You will be required to prepare the dataset for the analysis you choose to do. As with the first part, you will be graded, in part, on how easy your code is to read, so use proper formatting and comments to illustrate and communicate your intent as required.

For both parts of this assignment, use this "worksheet." It provides all the questions you are being asked, and your job will be to transfer your answers and SQL coding where indicated into this worksheet so that your peers can review your work. You should be able to use any Text Editor (Windows Notepad, Apple TextEdit, Notepad ++, Sublime Text, etc.) to copy and paste your answers. If you are going to use Word or some other page layout application, just be careful to make sure your answers and code are lined appropriately.
In this case, you may want to save as a PDF to ensure your formatting remains intact for you reviewer.



Part 1: Yelp Dataset Profiling and Understanding

1. Profile the data by finding the total number of records for each of the tables below:
	
i. Attribute table =

select COUNT(*)
from attribute
— - Result is 10 000

ii. Business table =

select COUNT(*)
from business
— - Result is 10 000

iii. Category table =

select COUNT(*)
from category
— - Result is 10 000

iv. Checkin table =

select COUNT(*)
from checkin
— - Result is 10 000

v. elite_years table =

select COUNT(*)
from elite_years
— - Result is 10 000

vi. friend table = 

select COUNT(*)
from friend
— - Result is 10 000

vii. hours table =

select COUNT(*)
from hours
— - Result is 10 000

viii. photo table = 

select COUNT(*)
from photo
— - Result is 10 000

ix. review table = 

select COUNT(*)
from review
— - Result is 10 000

x. tip table = 

select COUNT(*)
from tip
— - Result is 10 000

xi. user table =

select COUNT(*)
from user
— - Result is 10 000

2. Find the total number of distinct records for the primary keys in each of the tables listed below:

i. Business =

select COUNT (DISTINCT id)
from business
— - Result is 10 000

ii. Hours =

select COUNT (DISTINCT business_id)
from hours
— - Result is 1562

Used business_id but there’s no identified primary key in hours

iii. Category =

select COUNT (DISTINCT business_id)
from category
— - Result is 2643

Used business_id but there’s no identified primary key in category

iv. Attribute =

select COUNT (DISTINCT business_id)
from attribute
— - Result is 1115

Used business_id but there’s no identified primary key in attribute

v. Review =

select COUNT (DISTINCT id)
from review
— - Result is 10 000

vi. Checkin = 

select COUNT (Business_id)
from checkin
— - Result is 493

Used business_id but there’s no identified primary key in checkin

vii. Photo =

select COUNT (DISTINCT id)
from photo
— - Result is 10000


viii. Tip = 

select COUNT (DISTINCT business_id)
from tip
- - result is 3979

Used business_id but there’s no identified primary key in hours

ix. User = 

select COUNT (DISTINCT id)
from user
— - Result is 10 000

x. Friend = 

select COUNT (DISTINCT user_id)
from friend
— - Result is 11

Used user_id but there’s no identified primary key in friend

xi. Elite_years =

select COUNT(DISTINCT user_id)
from elite_years
— - Result is 2780

Used user_id but there’s no identified primary key in hours

Note: Primary Keys are denoted in the ER-Diagram with a yellow key icon.	



3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

	Answer: No
	
	
	SQL code used to arrive at answer:
	
	select *
	from user
	where id is NULL 
	or name is NULL 
	or review_count is NULL 
	or useful is NULL
	or funny is NULL
	or cool is NULL
	or fans is NULL
	or average_stars is NULL
	or compliment_hot is NULL
	or compliment_more is NULL
	or compliment_profile is NULL
	or compliment_cute is NULL
	or compliment_list is NULL
	or compliment_note is NULL
	or compliment_plain is NULL
	or compliment_cool is NULL
	or compliment_funny is NULL
	or compliment_writer is NULL
	or compliment_photos is NULL
	
	

	
4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:

	i. Table: Review, Column: Stars
	
		min:	1	max:	5	avg:	3.7082
		
	
	ii. Table: Business, Column: Stars
	
		min:	1.0	max:	5.0	avg:	3.6549
		
	
	iii. Table: Tip, Column: Likes
	
		min:	0	max:	2	avg:	0.0144
		
	
	iv. Table: Checkin, Column: Count
	
		min:	1	max:	53	avg:	1.9414
		
	
	v. Table: User, Column: Review_count
	
		min:	0	max:	2000	avg:	24.9995
		


5. List the cities with the most reviews in descending order:

	SQL code used to arrive at answer:
	
	select city
	, sum(review_count) as total_reviews
	from business
	group by city
	order by total_reviews DESC
	limit 10
	
	
	Copy and Paste the Result Below:
	
	| city       | total_reviews |
	+------------+---------------+
	| Las Vegas  |         82854 |
	| Phoenix    |         34503 |
	| Toronto    |         24113 |
	| Scottsdale |         20614 |
	| Charlotte  |         12523 |
	| Henderson  |         10871 |
	| Tempe      |         10504 |
	| Pittsburgh |          9798 |
	| Montréal   |          9448 |
	| Chandler   |          8112 |


	
6. Find the distribution of star ratings to the business in the following cities:

i. Avon

SQL code used to arrive at answer:

	select city
	, stars
	, sum(review_count) as count
	from business
	where city = "Avon"
	group by stars

Copy and Paste the Resulting Table Below (2 columns ñ star rating and count):

	| city | stars | count |
	+------+-------+-------+
	| Avon |   1.5 |    10 |
	| Avon |   2.5 |     6 |
	| Avon |   3.5 |    88 |
	| Avon |   4.0 |    21 |
	| Avon |   4.5 |    31 |
	| Avon |   5.0 |     3 |

ii. Beachwood

SQL code used to arrive at answer:

	select city
	, stars
	, sum(review_count) as count
	from business
	where city = "Beachwood"
	group by stars

Copy and Paste the Resulting Table Below (2 columns ñ star rating and count):
	
	| city      | stars | count |
	+-----------+-------+-------+
	| Beachwood |   2.0 |     8 |
	| Beachwood |   2.5 |     3 |
	| Beachwood |   3.0 |    11 |
	| Beachwood |   3.5 |     6 |
	| Beachwood |   4.0 |    69 |
	| Beachwood |   4.5 |    17 |
	| Beachwood |   5.0 |    23 |


7. Find the top 3 users based on their total number of reviews:
		
	SQL code used to arrive at answer:
	
	select name
	, sum(review_count) as total_reviews
	from user
	group by id
	order by total_reviews DESC
		
	Copy and Paste the Result Below:
		
	| -G7Zkl1wIWBBmD0KRy_sCw | Gerald    |         2000 |
	| -3s52C4zL_DHRK0ULG6qtg | Sara      |         1629 |
	| -8lbUNlXVSoXqaRRiHiSNg | Yuri      |         1339 |

8. Does posing more reviews correlate with more fans?

	Please explain your findings and interpretation of the results:
	
	In order to find or not a correlation between reviews and fans, we’ll split 	our data in 4. First section with review_count from 0 to 10, second from 11 	to 100, third from 101 to 1000 and last from 1001 to 2000. For each split, 		we’ll print the minimum and maximum fans and calculate the mean :

	select "0 to 10" as reviews_range
  	, MIN(fans)
	, MAX(fans)
	, AVG(fans)
	from user
	where review_count BETWEEN 0 and 10
	union
  	select "11 to 100" as reviews_range
  	, MIN(fans)
	, MAX(fans)
	, AVG(fans)
	from user
	where review_count BETWEEN 11 and 100
	union
	select "101 to 1000" as reviews_range
	, MIN(fans)
	, MAX(fans)
	, AVG(fans)
	from user
	where review_count BETWEEN 101 and 1000
	union
 	select "1001 to 2000" as reviews_range
 	, MIN(fans)
	, MAX(fans)
	, AVG(fans)
	from user
	where review_count BETWEEN 1001 and 2000
	order by AVG(fans)

	| reviews_range | MIN(fans) | MAX(fans) |      AVG(fans) |
	+---------------+-----------+-----------+----------------+
	| 0 to 10       |         0 |        70 | 0.124849215923 |
	| 11 to 100     |         0 |        64 |  1.16013986014 |
	| 101 to 1000   |         0 |       503 |         19.426 |
	| 1001 to 2000  |        16 |       311 |        129.625 |

	What can we say about these results ? Well, the difference in number of 		average fans doesn’t seem significant between 0 to 10 and 11 to 100 reviews. 	However, when comparing 11 to 100 reviews with 101 to 1000 reviews, we 		clearly see a difference. We raise from 1.16 fans in average to 19.4 fans in 	average when number of reviews is between 101 and 1000. Finally, the last 		category confirms the trend with on average 129.6 number of fans wit a number 	of reviews between 1001 and 2000(the max value).
	As a conclusion, it seems like number of fans and number of fans are 		correlated but we need to perform more analyses to confirm it (analysis of 		the variance…).

9. Are there more reviews with the word "love" or with the word "hate" in them?

	Answer:

	LOVE

	SQL code used to arrive at answer:

	select "love" as word
	, count(love.text)
	from review love
	where text like "%love%"
	UNION
	select "hate" as word
	, count(hate.text)
	from review hate
	where text like "%hate%"
	
	| word | count(love.text) |
	+------+------------------+
	| hate |              232 |
	| love |             1780 |

10. Find the top 10 users with the most fans:

	SQL code used to arrive at answer:
	
	select name
	, fans
	from user
	order by fans DESC
	limit 10

	Copy and Paste the Result Below:

	| name      | fans |
	+-----------+------+
	| Amy       |  503 |
	| Mimi      |  497 |
	| Harald    |  311 |
	| Gerald    |  253 |
	| Christine |  173 |
	| Lisa      |  159 |
	| Cat       |  133 |
	| William   |  126 |
	| Fran      |  124 |
	| Lissa     |  120 |
	
11. Is there a strong relationship (or correlation) between having a high number of fans and being listed as "useful" or "funny?" Out of the top 10 users with the highest number of fans, what percent are also listed as ìusefulî or ìfunnyî?

Key:
0% - 25% - Low relationship
26% - 75% - Medium relationship
76% - 100% - Strong relationship
	
	SQL code used to arrive at answer:
	
	The wording of this question is too vague for me, i give up on this one.

	Copy and Paste the Result Below:
	
	
	Please explain your findings and interpretation of the results:
	
	
	

Part 2: Inferences and Analysis

1. Pick one city and category of your choice and group the businesses in that city or category by their overall star rating. Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer the following questions. Include your code.
	
i. Do the two groups you chose to analyze have a different distribution of hours?

select city
, name
, category
, review_count
— - We then use the case statement to create two different categories
, case
when stars between 2 and 3 then "2 to 3 stars"
when stars between 4 and 5 then "4 to 5 stars"
else "other"
end star_category
— - end case statement
, hours
from business, category, hours
where business.id = category.business_id
and business.id = hours.business_id
and city = "Toronto"
and category = "Restaurants"

Yes, they have different distribution, they have different opening and closing hours.

ii. Do the two groups you chose to analyze have a different number of reviews?

select city
, category
, sum(review_count)
, case
when stars between 2 and 3 then "2 to 3 stars"
when stars between 4 and 5 then "4 to 5 stars"
else "other"
end star_category
from business, category
where business.id = category.business_id
and city = "Toronto"
and category = "Restaurants"
group by star_category


Group of restaurants in Toronto rated from 2 to 3 stars get 86 total reviews when it raises to 206 reviews for restaurants rated from 4 to 5 stars. It feels like higher rated restaurants tend to get more reviews than average restaurants.

iii. Are you able to infer anything from the location data provided between these two groups? Explain.

SQL code used for analysis:

select city
, category
— - we’l use the mean latitude and longitude to get a mean location for each group.
, avg(longitude)
, avg(latitude)
, case
when stars between 2 and 3 then "2 to 3 stars"
when stars between 4 and 5 then "4 to 5 stars"
else "other"
end star_category
from business, category
where business.id = category.business_id
and city = "Toronto"
and category = "Restaurants"
group by star_category

When comparing different average position for each group, we notice the 4 to 5 stars restaurants are located in a northern location of toronto compared to 2 to 3 stars which tend to be located in the old toronto.
		
2. Group business based on the ones that are open and the ones that are closed. What differences can you find between the ones that are still open and the ones that are closed? List at least two differences and the SQL code you used to arrive at your answer.
		
i. Difference 1:

First difference is simply the number of businesses opened and closed. 152 are opened and 32 are actually closed for a total 184 businesses.

         
ii. Difference 2:
         
Second difference is the average rating for each businesses. Indeed, the average star rating is 3.77  for opened businesses and 3.58 for closed businesses.
         
SQL code used for analysis:

select count(business_id) as total
, sum(review_count) as total_reviews
, avg(stars) as mean_rating
, case
when is_open = 0 then "closed"
when is_open = 1 then "opened"
end business
- - 
Important part is the following line as we only want to keep DISTINCT ID to avoid  biased results with duplicates.
— -
from business, (select DISTINCT business_id from category)
where id = business_id
group by business	
	
3. For this last part of your analysis, you are going to choose the type of analysis you want to conduct on the Yelp dataset and are going to prepare the data for analysis.

Ideas for analysis include: Parsing out keywords and business attributes for sentiment analysis, clustering businesses to find commonalities or anomalies between them, predicting the overall star rating for a business, predicting the number of fans a user will have, and so on. These are just a few examples to get you started, so feel free to be creative and come up with your own problem you want to solve. Provide answers, in-line, to all of the following:
	
i. Indicate the type of analysis you chose to do:
         
Who are the top 20 businesses who received the most reviews in the given dataset ? In this top 10, what was their average stars rating given these reviews ?
         
ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data:

For the analysis, we’ll use two different tables from the yelp database, business and review. In the review table, we’ll use the stars column and the name, city and is_Open columns from business. To find matches, we’ll join both tables using the business_id from review and id from business.
If we get the same number of reviews, then the average star will decide rating between businesses and finally the number of useful votes if we still have equal values.
                  
iii. Output of your finished dataset:

| name                                   | city       | total_reviews |   mean_rating | total_useful | situation |
+----------------------------------------+------------+---------------+---------------+--------------+-----------+
| The Buffet                             | Las Vegas  |            10 |           3.8 |           17 | opened    |
| Diablo's Cantina                       | Las Vegas  |             7 | 3.28571428571 |            4 | opened    |
| The Cheesecake Factory                 | Westlake   |             6 | 4.33333333333 |            0 | opened    |
| Joe's Farm Grill                       | Gilbert    |             5 |           5.0 |            1 | opened    |
| Rainforest Café                        | Las Vegas  |             5 |           2.4 |            3 | closed    |
| Portillo's Hot Dogs                    | Scottsdale |             4 |           5.0 |            1 | opened    |
| Delmonico Steakhouse                   | Las Vegas  |             4 |          4.25 |           15 | opened    |
| Matt's Big Breakfast                   | Phoenix    |             4 |           4.0 |            2 | opened    |
| Bootleggers Modern American Smokehouse | Phoenix    |             3 | 4.66666666667 |            1 | opened    |
| Dal Toro Ristorante                    | Las Vegas  |             3 | 4.66666666667 |            1 | closed    |
| Yonaka Modern Japanese                 | Las Vegas  |             3 | 4.33333333333 |            7 | opened    |
| Boba Tea House                         | Chandler   |             3 | 4.33333333333 |            4 | opened    |
| AquaKnox                               | Las Vegas  |             3 | 4.33333333333 |            2 | opened    |
| Barro's Pizza                          | Mesa       |             3 | 4.33333333333 |            1 | closed    |
| Luv It Frozen Custard                  | Las Vegas  |             3 | 4.33333333333 |            0 | opened    |
| TENDER Steak & Seafood                 | Las Vegas  |             3 | 4.33333333333 |            0 | opened    |
| 808 Sushi                              | Las Vegas  |             3 |           4.0 |            4 | opened    |
| Lazy Jane's                            | Madison    |             3 |           4.0 |            0 | opened    |
| Showcase Honda                         | Phoenix    |             3 | 3.66666666667 |            6 | opened    |
| El Zocalo Mexican Grill                | Chandler   |             3 | 3.33333333333 |            3 | opened    |


         
iv. Provide the SQL code you used to create your final dataset:

select name
, city
, count(review.stars) as total_reviews
, avg(review.stars) as mean_rating
, sum(useful) as total_useful
, case
when is_open = 0 then "closed"
when is_open = 1 then "opened"
end situation
from business, review
where review.business_id = business.id
group by name
order by total_reviews DESC, mean_rating DESC, total_useful DESC
limit 20

